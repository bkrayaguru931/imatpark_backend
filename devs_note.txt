configuration
-------
1) created a django project `django-admin startproject imatpark`
    which created imatpark folder , manage.py
2) created a requirements file
    -django
    -djangorestframework
    -psycopg2 (postgresql adapatear with python)
    -drf-spectacular ( for swagger documentation)
3) created a dev requirements file(which will not be required at production)
    -flake8 (for linting)
      `# flake8: noqa` ignores the file from linting
      `# noqa` iqnors the line from linting
      `# noqa: <error>` ignores specific error on the line
4) created a .gitignore file
    -ignores the files and folders from git

5) created dockerfile
    refenence : "https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/"

    few points :
    ->choose the base image
    ->installed the dependencies
    ->copied the app to the container
    ->exposed the port
    ->run the commands to start the server
    ->added user (Best practice is not to use base user for running the application)
    ->set the path
    ->swithed to the defined user from the root user


    build code : `docker build .`

6) created docker-compose file
    to run multiple containers with a single command like
    django application, postgres database and other

    -defining the version:determines the file format and what features are available for use.
    It's not related to the version of the Docker Compose tool at host system,
    so it ensures the consisterncy across different environments.

    -defining the services: defines the services that will be run in the containers.

        -build : specifies the path to the Dockerfile
        -mapping port and volume of the container to the host "host:container"
        -default command for docker-compose run, yet we can override this command when we use docker-compose run

    build iamge: `docker-compose build`
    run the container : `docker-compose up`

7) created a .env.dev file
    to use the environment variables in the code, we can use `os.environ.get('ENV_VARIABLE_NAME')`
    ALLOWED_HOSTS =  list of strings representing the host/domain names that your Django application can serve.

    DEBUG =  a boolean that turns on/off the debug mode of Django.
8)
